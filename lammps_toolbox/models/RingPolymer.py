'''
This code generates the lammps data file of  ring polymers
Author: Wangyu
Date: 17 Nov 2020.
'''
import math

Nm = 30  # degree of polymerization
theta = 2 * math.pi / Nm  # angle made by two successive beads at the center of the polygon
b = 1.122  # bond length
R = b / (2 * math.sin(theta / 2.0))  # radius of enclosing circle

RingPolymers = []
Bonds = []
Angles = []

natoms = 0
nbonds = 0
nangles = 0
mass = 1.0

atomtype = 1  # types of atom
bondtype = 1  # types of bonds
angletype = 1  # types of angles

for n in range(Nm):
    RingPolymer = {}
    natoms += 1
    RingPolymer['id'] = natoms
    RingPolymer['mole'] = 1
    RingPolymer['type'] = 1
    RingPolymer['x'] = R * math.cos(n * theta)
    RingPolymer['y'] = R * math.sin(n * theta)
    RingPolymer['z'] = 1.0
    RingPolymers.append(RingPolymer)

del RingPolymer

for n in range(Nm):
    Bond = {}
    nbonds += 1
    Bond['id'] = nbonds
    Bond['type'] = 1
    if n == Nm - 1:
        Bond['n1'] = RingPolymers[n]['id']
        Bond['n2'] = RingPolymers[0]['id']
        Bonds.append(Bond)
        break
    Bond['n1'] = RingPolymers[n]['id']
    Bond['n2'] = RingPolymers[n + 1]['id']
    Bonds.append(Bond)
del Bond

for n in range(Nm - 1):
    Angle = {}
    nangles += 1
    Angle['id'] = nangles
    Angle['type'] = 1
    if n == Nm - 2:
        Angle['n1'] = RingPolymers[n]['id']
        Angle['n2'] = RingPolymers[n + 1]['id']
        Angle['n3'] = RingPolymers[0]['id']
        Angles.append(Angle)
        break
    Angle['n1'] = RingPolymers[n]['id']
    Angle['n2'] = RingPolymers[n + 1]['id']
    Angle['n3'] = RingPolymers[n + 2]['id']
    Angles.append(Angle)
del Angle

with open('ring_polymers.data', 'w') as f:
    f.write("LAMMPS data file. CGCMM style. atom_style full generated by wangyu\n")
    f.write('\n')

    f.write(str(natoms) + ' atoms\n')
    f.write(str(atomtype) + ' atom types' + '\n')
    f.write(str(nbonds) + ' bonds\n')
    f.write(str(bondtype) + ' bond types' + '\n')
    f.write(str(nangles) + ' angles\n')
    f.write(str(angletype) + ' angle types' + '\n')
    f.write('\n')

    f.write(str(-R) + ' ' + str(R) + ' ' + 'xlo xhi\n')
    f.write(str(-R) + ' ' + str(R) + ' ' + 'ylo yhi\n')
    f.write(str(-R) + ' ' + str(R) + ' ' + 'zlo zhi\n')
    f.write('\n')

    f.write('Masses\n')
    f.write('\n')
    for n in range(atomtype):
        f.write(str(n + 1) + ' ' + str(mass) + '\n')
    f.write('\n')

    f.write('Atoms # molecular\n')
    f.write('\n')
    for Atom in RingPolymers:
        f.write(str(Atom['id'])+' '+str(Atom['mole'])+' '+str(Atom['type'])+' '+str(Atom['x'])+' '+str(Atom['y'])+' '+str(Atom['z'])+'\n')
    f.write('\n')

    f.write('Bonds\n')
    f.write('\n')
    for Bond in Bonds:
        f.write(str(Bond['id'])+' '+str(Bond['type'])+' '+str(Bond['n1'])+' '+str(Bond['n2'])+'\n')
    f.write('\n')

    f.write('Angles\n')
    f.write('\n')
    for Angle in Angles:
        f.write(str(Angle['id'])+' '+str(Angle['type'])+' '+str(Angle['n1'])+' '+str(Angle['n2'])+' '+str(Angle['n3'])+'\n')


