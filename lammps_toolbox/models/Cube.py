'''
This code generates the lammps data file of Cubic Nanoparticles
Author: Wangyu
Date: 18 Nov 2020.
'''

import math

a = 1.0
nl = 2

Cubes = []
Bonds = []
Angles = []

natoms = 0
nbonds = 0
nangles = 0

atomtype = 1  # types of atom
bondtype = 1  # types of bonds
angletype = 2  # types of angles

mass = 1.00

for n1 in range(nl):
    for n2 in range(nl):
        for n3 in range(nl):
            Cube = {}
            Cube['id'] = natoms + 1
            Cube['mole'] = 1
            Cube['type'] = 1
            Cube['x'] = n3 * a
            Cube['y'] = n2 * a
            Cube['z'] = n1 * a
            Cubes.append(Cube)
            natoms += 1
del Cube
# print(natoms)

# Bonding principle:Traverse all atoms and form bonds according to distance
for i in range(natoms - 1):
    for j in range(i + 1, natoms):
        Bond = {}
        dx = Cubes[j]['x'] - Cubes[i]['x']
        dy = Cubes[j]['y'] - Cubes[i]['y']
        dz = Cubes[j]['z'] - Cubes[i]['z']
        if math.sqrt(dx * dx + dy * dy + dz * dz) == a:
            Bond['id'] = nbonds + 1
            Bond['type'] = 1
            Bond['n1'] = Cubes[i]['id']
            Bond['n2'] = Cubes[j]['id']
            Bonds.append(Bond)
            nbonds += 1

del Bond
# print(nbonds)

# Angle principle：Two pairs of bonded atoms share the same atom to form an angle，Bù chóngfù，Not repeating
for i in range(nbonds - 1):
    for j in range(i + 1, nbonds):
        Angle = {}
        if Bonds[j]['n1'] == Bonds[i]['n1']:
            Angle['id'] = nangles + 1
            Angle['type'] = 2
            Angle['n1'] = Bonds[i]['n2']
            Angle['n2'] = Bonds[i]['n1']
            Angle['n3'] = Bonds[j]['n2']
            Angles.append(Angle)
            nangles += 1
            continue
        if Bonds[j]['n1'] == Bonds[i]['n2']:
            Angle['id'] = nangles + 1
            Angle['type'] = 1
            Angle['n1'] = Bonds[i]['n1']
            Angle['n2'] = Bonds[i]['n2']
            Angle['n3'] = Bonds[j]['n2']
            Angles.append(Angle)
            nangles += 1
            continue
        if Bonds[j]['n2'] == Bonds[i]['n2']:
            Angle['id'] = nangles + 1
            Angle['type'] = 2
            Angle['n1'] = Bonds[i]['n1']
            Angle['n2'] = Bonds[i]['n2']
            Angle['n3'] = Bonds[j]['n1']
            Angles.append(Angle)
            nangles += 1
            continue

del Angle
# print(nangles)

with open('cubes.data', 'w') as f:
    f.write("LAMMPS data file. CGCMM style. atom_style full generated by wangyu\n")
    f.write('\n')

    f.write(str(natoms) + ' atoms\n')
    f.write(str(atomtype) + ' atom types' + '\n')
    f.write(str(nbonds) + ' bonds\n')
    f.write(str(bondtype) + ' bond types' + '\n')
    f.write(str(nangles) + ' angles\n')
    f.write(str(angletype) + ' angle types' + '\n')
    f.write('\n')

    f.write(str(-nl * a) + ' ' + str(nl * a) + ' ' + 'xlo xhi\n')
    f.write(str(-nl * a) + ' ' + str(nl * a) + ' ' + 'ylo yhi\n')
    f.write(str(-nl * a) + ' ' + str(nl * a) + ' ' + 'zlo zhi\n')
    f.write('\n')

    f.write('Masses\n')
    f.write('\n')
    for n in range(atomtype):
        f.write(str(n + 1) + ' ' + str(mass) + '\n')
    f.write('\n')

    f.write('Atoms # molecular\n')
    f.write('\n')
    for Atom in Cubes:
        f.write(str(Atom['id']) + ' ' + str(Atom['mole']) + ' ' + str(Atom['type']) + ' ' + str(Atom['x']) + ' ' + str(
            Atom['y']) + ' ' + str(Atom['z']) + '\n')
    f.write('\n')

    f.write('Bonds\n')
    f.write('\n')
    for Bond in Bonds:
        f.write(str(Bond['id']) + ' ' + str(Bond['type']) + ' ' + str(Bond['n1']) + ' ' + str(Bond['n2']) + '\n')
    f.write('\n')

    f.write('Angles\n')
    f.write('\n')
    for Angle in Angles:
        f.write(
            str(Angle['id']) + ' ' + str(Angle['type']) + ' ' + str(Angle['n1']) + ' ' + str(Angle['n2']) + ' ' + str(
                Angle['n3']) + '\n')
