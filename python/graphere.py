import math
import collections
import numpy as np

# INPUT PARAMETERS:
a = 1.0
nx = 4
ny = 4

# Size of the unit cell
A = 3 * a
B = math.sqrt(3) * a

# Coordinates of the 4 atoms in the unit cell
point = collections.namedtuple('Point', ['x', 'y', 'z'])
base = [point(0.0, 0.0, 0.0), point(a / 2, B / 2, 0.0), point(A / 2, B / 2, 0.0), point(2 * a, 0.0, 0.0)]

# Total number of atoms
N = len(base) * nx * ny

# Calculate the coordinates of the atoms in the layer
atom_t = np.dtype({'names': ['id', 'type', 'x', 'y', 'z'], 'formats': ['i', 'i', 'f', 'f', 'f']}, align=True)
graphere = np.zeros(N, dtype=atom_t, order='C')

natom = 0
natomtype = 1
mass = 12.0107

for ix in range(nx):
    for iy in range(ny):
        for iatom in range(len(base)):
            graphere[natom]['id'] = natom + 1
            graphere[natom]['type'] = 1
            graphere[natom]['x'] = base[iatom].x + ix * A
            graphere[natom]['y'] = base[iatom].y + iy * B
            graphere[natom]['z'] = base[iatom].z
            natom += 1

with open("graphere.data", "w") as f:
    f.write("LAMMPS data file. CGCMM style. atom_style full generated by wangyu\n")
    f.write('\n')

    f.write(str(natom) + ' atoms\n')
    f.write(str(natomtype) + ' atom types' + '\n')
    f.write('\n')

    f.write('0.0' + ' ' + str(A * nx) + ' ' + 'xlo xhi\n')
    f.write('0.0' + ' ' + str(A * nx) + ' ' + 'ylo yhi\n')
    f.write('-5.0 5.0' + 'zlo zhi\n')
    f.write('\n')

    f.write('Masses\n')
    f.write('\n')
    for n in range(natomtype):
        f.write(str(n + 1) + ' ' + str(mass) + '\n')
    f.write('\n')

    f.write('Atoms # atomic\n')
    f.write('\n')
    for n in range(natom):
        f.write(str(graphere[n]['id']) + ' ' + str(graphere[n]['type']) + ' ' + str(graphere[n]['x']) + ' ' + str(
            graphere[n]['y']) + ' ' + str(graphere[n]['z']) + '\n')
